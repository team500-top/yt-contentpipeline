"""
–ü–∞—Ç—á –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π frontend
"""
import os
import shutil
from pathlib import Path

print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ YouTube Analyzer...")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
required_files = {
    "frontend/index.html": "Frontend HTML",
    "frontend/app.js": "Frontend JavaScript", 
    "frontend/style.css": "Frontend CSS",
    "backend/main.py": "Backend —Å–µ—Ä–≤–µ—Ä",
    "backend/services.py": "Backend —Å–µ—Ä–≤–∏—Å—ã"
}

missing = []
for file, desc in required_files.items():
    if not Path(file).exists():
        missing.append(f"‚ùå {file} ({desc})")
    else:
        print(f"‚úÖ {file} –Ω–∞–π–¥–µ–Ω")

if missing:
    print("\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
    for m in missing:
        print(m)
    print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞!")
    input("–ù–∞–∂–º–∏—Ç–µ Enter...")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
simple_server = '''"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è YouTube Analyzer
"""
from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from pathlib import Path
import sys

# –ü—É—Ç–∏
current_dir = Path(__file__).parent
project_root = current_dir.parent
frontend_path = project_root / "frontend"

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
try:
    from backend.services import (
        tasks_router, youtube_router, 
        analysis_router, data_router, config_router
    )
    services_loaded = True
except Exception as e:
    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    services_loaded = False

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="YouTube Analyzer")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# API —Ä–æ—É—Ç–µ—Ä—ã
if services_loaded:
    app.include_router(tasks_router, prefix="/api/tasks")
    app.include_router(youtube_router, prefix="/api/youtube")
    app.include_router(analysis_router, prefix="/api/analysis")
    app.include_router(data_router, prefix="/api/data")
    app.include_router(config_router, prefix="/api/config")

# Health check
@app.get("/health")
async def health():
    return {"status": "ok", "service": "YouTube Analyzer"}

@app.get("/api")
async def api_info():
    return {
        "name": "YouTube Analyzer API",
        "version": "2.0",
        "services_loaded": services_loaded
    }

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/", StaticFiles(directory=str(frontend_path), html=True), name="static")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ YouTube Analyzer (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)...")
    print(f"üìÅ Frontend –ø—É—Ç—å: {frontend_path}")
    print(f"‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {services_loaded}")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000")
    
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")
'''

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
with open("backend/simple_server.py", "w", encoding="utf-8") as f:
    f.write(simple_server)

print("\n‚úÖ –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä!")

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞—Ç–Ω–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
new_bat = '''@echo off
chcp 65001 >nul
title YouTube Analyzer - Simple Mode

cd /d "%~dp0"

if exist "venv\\Scripts\\activate.bat" (
    call venv\\Scripts\\activate.bat
) else (
    echo –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...
    python -m venv venv
    call venv\\Scripts\\activate.bat
    pip install fastapi uvicorn python-multipart
)

cls
echo =======================================
echo    YouTube Analyzer - Simple Mode
echo =======================================
echo.

python backend/simple_server.py
'''

with open("run_simple.bat", "w", encoding="utf-8") as f:
    f.write(new_bat)

print("‚úÖ –°–æ–∑–¥–∞–Ω run_simple.bat")
print("\nüéØ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: run_simple.bat")
print("–≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
"""
YouTube Analyzer - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ backend/working_server.py
"""
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import FileResponse, JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import sys
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
project_root = current_dir.parent
frontend_path = project_root / "frontend"

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(project_root))

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="YouTube Analyzer",
    description="–ê–Ω–∞–ª–∏–∑ YouTube –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
    version="2.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è frontend —Ñ–∞–π–ª–æ–≤
if not frontend_path.exists():
    print(f"‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {frontend_path}")
    exit(1)

print(f"‚úÖ Frontend –ø—É—Ç—å: {frontend_path}")

# API –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@app.get("/health")
async def health():
    return {"status": "ok", "service": "YouTube Analyzer"}

@app.get("/api")
async def api_info():
    return {
        "name": "YouTube Analyzer API",
        "version": "2.0",
        "services_loaded": True
    }

@app.get("/api/tasks")
async def get_tasks():
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î
    try:
        from backend.database import DatabaseManager
        db = DatabaseManager()
        tasks = db.get_all_tasks()
        return tasks
    except:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return []

@app.get("/api/tasks/active")
async def get_active_tasks():
    return {"count": 0, "tasks": []}

@app.get("/api/config")
async def get_config():
    return {
        "youtube_api_key": "",
        "max_long_videos_channel": 5,
        "max_long_videos_search": 5,
        "max_shorts_channel": 5,
        "max_shorts_search": 5,
        "whisper_model": "base"
    }

@app.get("/api/data/videos")
async def get_videos(limit: int = 50, offset: int = 0):
    try:
        from backend.database import DatabaseManager
        db = DatabaseManager()
        videos = db.get_videos(limit, offset)
        return videos
    except:
        return []

@app.get("/api/data/channels")
async def get_channels():
    try:
        from backend.database import DatabaseManager
        db = DatabaseManager()
        channels = db.get_channels()
        return channels
    except:
        return []

@app.get("/api/data/stats")
async def get_stats():
    try:
        from backend.database import DatabaseManager
        db = DatabaseManager()
        stats = db.get_statistics()
        return stats
    except:
        return {
            "total_videos": 0,
            "total_channels": 0,
            "total_tasks": 0,
            "completed_tasks": 0,
            "avg_engagement": 0,
            "videos_by_type": {}
        }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.get("/")
async def read_index():
    index_file = frontend_path / "index.html"
    if index_file.exists():
        return FileResponse(str(index_file))
    return HTMLResponse("<h1>index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>")

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è JS –∏ CSS
@app.get("/app.js")
async def get_app_js():
    js_file = frontend_path / "app.js"
    if js_file.exists():
        return FileResponse(
            str(js_file),
            media_type="application/javascript",
            headers={"Cache-Control": "no-cache"}
        )
    return JSONResponse({"error": "app.js not found"}, status_code=404)

@app.get("/style.css")
async def get_style_css():
    css_file = frontend_path / "style.css"
    if css_file.exists():
        return FileResponse(
            str(css_file),
            media_type="text/css",
            headers={"Cache-Control": "no-cache"}
        )
    return JSONResponse({"error": "style.css not found"}, status_code=404)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ!)
app.mount("/", StaticFiles(directory=str(frontend_path), html=True), name="static")

# –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
try:
    from backend.services import (
        tasks_router, youtube_router,
        analysis_router, data_router, config_router
    )
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    app.include_router(tasks_router, prefix="/api/tasks", tags=["Tasks"])
    app.include_router(youtube_router, prefix="/api/youtube", tags=["YouTube"])
    app.include_router(analysis_router, prefix="/api/analysis", tags=["Analysis"])
    app.include_router(data_router, prefix="/api/data", tags=["Data"])
    app.include_router(config_router, prefix="/api/config", tags=["Config"])
    
    print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
except Exception as e:
    print(f"‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {e}")
    print("   –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏ API")

if __name__ == "__main__":
    print("\n" + "="*50)
    print("üöÄ YouTube Analyzer - Working Server")
    print("="*50)
    print(f"üìÅ Frontend: {frontend_path}")
    print(f"üåê URL: http://localhost:8000")
    print("üìö API Docs: http://localhost:8000/docs")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("="*50 + "\n")
    
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")
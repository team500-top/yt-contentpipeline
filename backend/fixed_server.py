"""
YouTube Analyzer - Fixed Server
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
"""
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import FileResponse, HTMLResponse, StreamingResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import os
import sys
from pathlib import Path
import json

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
project_root = current_dir.parent
sys.path.append(str(project_root))

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="YouTube Content Analyzer",
    description="–ê–Ω–∞–ª–∏–∑ YouTube –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç—Ä–µ–Ω–¥–æ–≤",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
try:
    from services import (
        tasks_router,
        youtube_router, 
        analysis_router,
        data_router,
        config_router
    )
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ API
    app.include_router(tasks_router, prefix="/api/tasks", tags=["Tasks"])
    app.include_router(youtube_router, prefix="/api/youtube", tags=["YouTube"])
    app.include_router(analysis_router, prefix="/api/analysis", tags=["Analysis"])
    app.include_router(data_router, prefix="/api/data", tags=["Data"])
    app.include_router(config_router, prefix="/api/config", tags=["Config"])
    
    services_loaded = True
    print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    services_loaded = False

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
frontend_path = project_root / "frontend"

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç—ã
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    index_path = frontend_path / "index.html"
    if index_path.exists():
        return FileResponse(str(index_path), media_type="text/html")
    return HTMLResponse("<h1>YouTube Analyzer</h1><p>Frontend –Ω–µ –Ω–∞–π–¥–µ–Ω</p>")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã JavaScript –∏ CSS
@app.get("/app.js")
async def get_app_js():
    """JavaScript —Ñ–∞–π–ª"""
    js_path = frontend_path / "app.js"
    if js_path.exists():
        return FileResponse(
            str(js_path),
            media_type="application/javascript",
            headers={"Cache-Control": "no-cache"}
        )
    return JSONResponse({"error": "app.js not found"}, status_code=404)

@app.get("/style.css")
async def get_style_css():
    """CSS —Ñ–∞–π–ª"""
    css_path = frontend_path / "style.css"
    if css_path.exists():
        return FileResponse(
            str(css_path),
            media_type="text/css",
            headers={"Cache-Control": "no-cache"}
        )
    return JSONResponse({"error": "style.css not found"}, status_code=404)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤
@app.get("/{filename}.html")
async def get_html_file(filename: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤"""
    file_path = frontend_path / f"{filename}.html"
    if file_path.exists():
        return FileResponse(str(file_path), media_type="text/html")
    return HTMLResponse(f"<h1>{filename}.html –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>", status_code=404)

# Health check endpoint
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return JSONResponse({
        "status": "healthy",
        "version": "2.0.0",
        "message": "YouTube Analyzer —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "services_loaded": services_loaded
    })

# API info
@app.get("/api")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return JSONResponse({
        "name": "YouTube Analyzer API",
        "version": "2.0.0",
        "endpoints": {
            "tasks": "/api/tasks",
            "youtube": "/api/youtube", 
            "analysis": "/api/analysis",
            "data": "/api/data",
            "config": "/api/config"
        },
        "docs": "/docs",
        "redoc": "/redoc",
        "services_loaded": services_loaded
    })

# Export endpoint
@app.get("/api/data/export/download/{filename}")
async def download_export(filename: str):
    """–°–∫–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    file_path = project_root / "exports" / filename
    if file_path.exists() and file_path.suffix == '.xlsx':
        return FileResponse(
            path=str(file_path),
            filename=filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    return JSONResponse({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status_code=404)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    if request.url.path.startswith("/api/"):
        return JSONResponse(
            status_code=404,
            content={"error": "API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω", "path": request.url.path}
        )
    
    # –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    if request.url.path.endswith(('.js', '.css', '.png', '.jpg', '.ico')):
        return JSONResponse(
            status_code=404,
            content={"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "path": request.url.path}
        )
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return await root()

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    if not any(request.url.path.endswith(ext) for ext in ['.js', '.css', '.ico', '.png', '.jpg']):
        print(f"üì• {request.method} {request.url.path}")
    
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    if response.status_code >= 400:
        print(f"‚ùå {request.method} {request.url.path} -> {response.status_code}")
    
    return response

# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ - –í –°–ê–ú–û–ú –ö–û–ù–¶–ï!
# –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç.–¥.)
app.mount("/", StaticFiles(directory=str(frontend_path), html=False), name="static")

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def ensure_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    dirs = ['temp', 'exports', 'logs']
    for dir_name in dirs:
        dir_path = project_root / dir_name
        dir_path.mkdir(exist_ok=True)

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    ensure_directories()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ YouTube Analyzer (Fixed)...")
    print(f"üìÅ Frontend –ø—É—Ç—å: {frontend_path}")
    print(f"‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {services_loaded}")
    print("üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
    print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("‚ù§Ô∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    uvicorn.run(
        app,
        host="127.0.0.1",
        port=8000,
        reload=True,
        log_level="info",
        access_log=False
    )

if __name__ == "__main__":
    main()
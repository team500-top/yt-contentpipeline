"""
YouTube Analyzer - API Services
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏, YouTube API, –∞–Ω–∞–ª–∏–∑–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏
"""
from fastapi import APIRouter, BackgroundTasks, HTTPException, UploadFile, File
from typing import List, Dict, Optional
import uuid
import asyncio
import json
from datetime import datetime
import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
project_root = current_dir.parent
sys.path.append(str(project_root))

from models import *
from database import DatabaseManager
from shared.config import settings
from shared.utils import Utils
from shared.youtube_parser import YouTubeParser

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = DatabaseManager()
utils = Utils()
youtube_parser = YouTubeParser(settings.YOUTUBE_API_KEY) if settings.YOUTUBE_API_KEY else None

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
tasks_router = APIRouter()
youtube_router = APIRouter()
analysis_router = APIRouter()
data_router = APIRouter()
config_router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
active_tasks = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_active_tasks():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î"""
    global active_tasks
    try:
        tasks = db.get_all_tasks()
        for task in tasks:
            if task['status'] in ['running', 'paused', 'created']:
                active_tasks[task['task_id']] = task
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}")

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
load_active_tasks()

# ============ TASKS SERVICE ============

@tasks_router.get("/", response_model=List[Dict])
async def get_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    try:
        tasks = db.get_all_tasks()
        return tasks
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}")

@tasks_router.get("/active")
async def get_active_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø–∞–º—è—Ç–∏"""
    return {
        "count": len(active_tasks),
        "tasks": list(active_tasks.values())
    }

@tasks_router.post("/", response_model=TaskCreateResponse)
async def create_task(task: TaskCreate, background_tasks: BackgroundTasks):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not task.keywords and not task.channels:
            raise HTTPException(status_code=400, detail="–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª—ã")
        
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_id = str(uuid.uuid4())
        total_items = len(task.keywords) + len(task.channels)
        
        task_data = {
            "task_id": task_id,
            "status": "created",
            "progress": 0,
            "total_items": total_items,
            "created_at": datetime.now().isoformat(),
            "config": task.dict()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        db.save_task(task_data)
        active_tasks[task_id] = task_data
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(process_task, task_id, task)
        
        return TaskCreateResponse(
            task_id=task_id,
            status=TaskStatus.CREATED,
            message="–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")

@tasks_router.get("/{task_id}")
async def get_task(task_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        task = db.get_task(task_id)
        if not task:
            raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return task
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")

@tasks_router.post("/{task_id}/pause")
async def pause_task(task_id: str):
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–∞—É–∑—É"""
    try:
        if task_id in active_tasks:
            active_tasks[task_id]["status"] = "paused"
            db.update_task_status(task_id, "paused")
            return {"message": "–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É", "status": "paused"}
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –ë–î
        task = db.get_task(task_id)
        if task and task['status'] == 'running':
            db.update_task_status(task_id, "paused")
            return {"message": "–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É", "status": "paused"}
            
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –∑–∞–¥–∞—á–∏: {str(e)}")

@tasks_router.post("/{task_id}/resume")
async def resume_task(task_id: str, background_tasks: BackgroundTasks):
    """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        task = db.get_task(task_id)
        if not task:
            raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if task['status'] == 'paused':
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            db.update_task_status(task_id, "running")
            active_tasks[task_id] = task
            active_tasks[task_id]["status"] = "running"
            
            # –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
            task_config = json.loads(task['config']) if isinstance(task['config'], str) else task['config']
            task_obj = TaskCreate(**task_config)
            background_tasks.add_task(process_task, task_id, task_obj, resume=True)
            
            return {"message": "–ó–∞–¥–∞—á–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞", "status": "running"}
        else:
            raise HTTPException(status_code=400, detail=f"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {task['status']}")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")

async def process_task(task_id: str, task: TaskCreate, resume: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        print(f"üîÑ {'–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º' if resume else '–ù–∞—á–∏–Ω–∞–µ–º'} –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ {task_id}")
        
        if not resume:
            active_tasks[task_id]["status"] = "running"
            db.update_task_status(task_id, "running")
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        current_task = db.get_task(task_id)
        processed = current_task['progress'] if current_task else 0
        total = len(task.keywords) + len(task.channels)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for idx, keyword in enumerate(task.keywords):
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            if idx < processed and processed <= len(task.keywords):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã
            if task_id in active_tasks and active_tasks[task_id]["status"] == "paused":
                print(f"‚è∏Ô∏è  –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞ –ø–∞—É–∑–µ")
                return
                
            print(f"üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {keyword}")
            try:
                videos = youtube_parser.search_videos(
                    keyword, 
                    settings.MAX_LONG_VIDEOS_SEARCH + settings.MAX_SHORTS_SEARCH,
                    task.order_by.value
                )
                await process_videos(videos, task_id)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed = idx + 1
                active_tasks[task_id]["progress"] = processed
                db.update_task_progress(task_id, processed, total)
                
                await asyncio.sleep(settings.REQUEST_DELAY)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ {keyword}: {e}")
                continue
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        channel_start_idx = len(task.keywords)
        for idx, channel_url in enumerate(task.channels):
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            if channel_start_idx + idx < processed:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã
            if task_id in active_tasks and active_tasks[task_id]["status"] == "paused":
                print(f"‚è∏Ô∏è  –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞ –ø–∞—É–∑–µ")
                return
                
            print(f"üì∫ –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_url}")
            try:
                channel_id = youtube_parser.extract_channel_id(channel_url)
                if channel_id:
                    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    channel_info = youtube_parser.get_channel_info(channel_id)
                    if channel_info:
                        db.save_channel(channel_info)
                    
                    # –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞
                    videos = youtube_parser.get_channel_videos(
                        channel_id, 
                        settings.MAX_LONG_VIDEOS_CHANNEL + settings.MAX_SHORTS_CHANNEL
                    )
                    await process_videos(videos, task_id)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed = channel_start_idx + idx + 1
                active_tasks[task_id]["progress"] = processed
                db.update_task_progress(task_id, processed, total)
                
                await asyncio.sleep(settings.REQUEST_DELAY)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_url}: {e}")
                continue
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        active_tasks[task_id]["status"] = "completed"
        db.update_task_status(task_id, "completed")
        
        # –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if task_id in active_tasks:
            del active_tasks[task_id]
            
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}: {e}")
        if task_id in active_tasks:
            active_tasks[task_id]["status"] = "error"
        db.update_task_status(task_id, "error", str(e))

async def process_videos(videos: List[Dict], task_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π"""
    for video in videos:
        try:
            video_id = video.get('video_id')
            if not video_id or db.video_exists(video_id):
                continue
            
            print(f"  üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: {video.get('title', 'Unknown')[:50]}...")
            
            # –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            video['analyzed_at'] = datetime.now().isoformat()
            video['task_id'] = task_id
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            try:
                from youtube_transcript_api import YouTubeTranscriptApi
                
                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
                transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä—É—Å—Å–∫–∏–µ -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ -> –ª—é–±—ã–µ
                transcript = None
                try:
                    transcript = transcript_list.find_transcript(['ru'])
                except:
                    try:
                        transcript = transcript_list.find_transcript(['en'])
                    except:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                        for t in transcript_list:
                            transcript = t
                            break
                
                if transcript:
                    transcript_text = ' '.join([entry['text'] for entry in transcript.fetch()])
                    video['transcript'] = transcript_text[:50000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
                    video['transcript_source'] = f"youtube_{transcript.language_code}"
                    print(f"    ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–µ–Ω ({transcript.language_code})")
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                    if transcript_text:
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                        video['keywords'] = utils.extract_keywords(transcript_text, top_n=10)
                        
                        # –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ (—Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
                        word_count = len(transcript_text.split())
                        duration_seconds = video.get('duration_seconds', 0)
                        if duration_seconds > 0:
                            video['speech_speed'] = round((word_count / duration_seconds) * 60, 1)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
                        ad_keywords = ['—Å–ø–æ–Ω—Å–æ—Ä', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–º–æ–∫–æ–¥', '—Å–∫–∏–¥–∫–∞', 'sponsor', 'promo', 'discount']
                        video['has_branding'] = any(keyword in transcript_text.lower() for keyword in ad_keywords)
                        
            except Exception as e:
                print(f"    ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {e}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –≤–∏–¥–µ–æ –∫–æ—Ä–æ—Ç–∫–æ–µ, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Whisper
                if video.get('duration_seconds', 0) < 600:  # –ú–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç
                    print(f"    üé§ –ü–æ–ø—ã—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Whisper...")
                    # TODO: –î–æ–±–∞–≤–∏—Ç—å Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
                    video['transcript_source'] = 'none'
            
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            if 'engagement_rate' not in video and video.get('views', 0) > 0:
                video['engagement_rate'] = utils.calculate_engagement_rate(
                    video.get('views', 0),
                    video.get('likes', 0),
                    video.get('comments', 0)
                )
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = video.get('title', '')
            video['title_length'] = len(title)
            video['has_emoji'] = utils.has_emoji(title)
            
            # –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            description = video.get('description', '')
            video['description_length'] = len(description)
            video['links_count'] = utils.count_links(description)
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            recommendations = []
            
            if video.get('engagement_rate', 0) < 1:
                recommendations.append("–ù–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–µ–≤—å—é.")
            elif video.get('engagement_rate', 0) > 5:
                recommendations.append("–û—Ç–ª–∏—á–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å! –ò–∑—É—á–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.")
            
            if video.get('is_short') and video.get('views', 0) > 10000:
                recommendations.append("–£—Å–ø–µ—à–Ω—ã–π Short! –°–æ–∑–¥–∞–π—Ç–µ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            
            if not video.get('has_cc'):
                recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ö–≤–∞—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.")
            
            if video.get('speech_speed', 0) > 180:
                recommendations.append("–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.")
            
            video['recommendations'] = ' '.join(recommendations)
            
            # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—Ö–∞
            success_factors = []
            if video.get('has_emoji'):
                success_factors.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
            if video.get('duration_seconds', 0) < 60:
                success_factors.append("–§–æ—Ä–º–∞—Ç Shorts")
            if video.get('engagement_rate', 0) > 3:
                success_factors.append("–í—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
            
            video['success_analysis'] = ', '.join(success_factors) if success_factors else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤–∏–¥–µ–æ"
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            db.save_video(video)
            print(f"    ‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {video.get('video_id', 'unknown')}: {e}")
            continue

# ============ YOUTUBE SERVICE ============

@youtube_router.get("/search")
async def search_videos(query: str, max_results: int = 10, order: str = "relevance"):
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        videos = youtube_parser.search_videos(query, max_results, order)
        return {
            "videos": videos, 
            "count": len(videos),
            "query": query,
            "order": order
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

@youtube_router.get("/channel/{channel_id}")
async def get_channel_info(channel_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        channel_info = youtube_parser.get_channel_info(channel_id)
        if not channel_info:
            raise HTTPException(status_code=404, detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        return channel_info
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")

@youtube_router.get("/channel/{channel_id}/videos")
async def get_channel_videos(channel_id: str, max_results: int = 20):
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        videos = youtube_parser.get_channel_videos(channel_id, max_results)
        return {
            "channel_id": channel_id,
            "videos": videos,
            "count": len(videos)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞: {str(e)}")

# ============ DATA SERVICE ============

@data_router.get("/videos")
async def get_videos(limit: int = 100, offset: int = 0):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
    try:
        videos = db.get_videos(limit, offset)
        return videos
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

@data_router.get("/videos/{video_id}")
async def get_video_details(video_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
    try:
        video = db.get_video_by_id(video_id)
        if not video:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return video
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

@data_router.get("/channels")
async def get_channels():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        channels = db.get_channels()
        return channels
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")

@data_router.get("/channels/{channel_id}")
async def get_channel_details(channel_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        channel = db.get_channel_stats(channel_id)
        if not channel:
            raise HTTPException(status_code=404, detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return channel
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")

@data_router.get("/stats")
async def get_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        stats = db.get_statistics()
        stats['active_tasks'] = len(active_tasks)
        return stats
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@data_router.get("/export")
async def export_to_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    try:
        filename = db.export_to_excel()
        file_path = Path(settings.EXPORT_DIR) / filename
        
        return {
            "filename": filename,
            "status": "exported",
            "path": str(file_path),
            "size": file_path.stat().st_size if file_path.exists() else 0
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

@data_router.delete("/clear")
async def clear_database():
    """–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active_tasks.clear()
        
        # –û—á–∏—Å—Ç–∏—Ç—å –ë–î
        db.clear_database()
        
        return {"message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞", "status": "success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {str(e)}")

# ============ CONFIG SERVICE ============

@config_router.get("/")
async def get_config():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        config = settings.get_safe_dict()
        config['has_youtube_api'] = bool(settings.YOUTUBE_API_KEY)
        return config
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

@config_router.post("/")
async def update_config(config_data: dict):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings.update_from_dict(config_data)
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å YouTube parser –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è API –∫–ª—é—á
        global youtube_parser
        if 'youtube_api_key' in config_data and config_data['youtube_api_key']:
            if config_data['youtube_api_key'] != '***':  # –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ—Å–ª–∏ —Å–∫—Ä—ã—Ç–æ
                settings.YOUTUBE_API_KEY = config_data['youtube_api_key']
                youtube_parser = YouTubeParser(config_data['youtube_api_key'])
        
        return {
            "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            "status": "success",
            "config": settings.get_safe_dict()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

@config_router.post("/validate-api-key")
async def validate_api_key(api_key: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å YouTube API –∫–ª—é—á"""
    try:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –∏ —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_parser = YouTubeParser(api_key)
        test_videos = test_parser.search_videos("test", 1)
        
        return {
            "valid": True,
            "message": "API –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π"
        }
    except Exception as e:
        return {
            "valid": False,
            "message": f"–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞: {str(e)}"
        }

# ============ ANALYSIS SERVICE ============

@analysis_router.post("/video/{video_id}")
async def analyze_video(video_id: str):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        details = youtube_parser.get_video_details([video_id])
        if video_id not in details:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        video_data = details[video_id]
        
        # –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑
        analysis_result = {
            "video_id": video_id,
            "engagement_metrics": {
                "views": video_data.get('views', 0),
                "likes": video_data.get('likes', 0),
                "comments": video_data.get('comments', 0),
                "engagement_rate": video_data.get('engagement_rate', 0),
                "like_ratio": video_data.get('like_ratio', 0),
                "comment_ratio": video_data.get('comment_ratio', 0)
            },
            "content_analysis": {
                "duration": video_data.get('duration'),
                "is_short": video_data.get('is_short', False),
                "has_cc": video_data.get('has_cc', False),
                "tags_count": len(video_data.get('tags', [])),
                "video_quality": video_data.get('video_quality', 'sd')
            },
            "recommendations": [
                "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                f"–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {'–í—ã—Å–æ–∫–∞—è' if video_data.get('engagement_rate', 0) > 5 else '–°—Ä–µ–¥–Ω—è—è' if video_data.get('engagement_rate', 0) > 2 else '–ù–∏–∑–∫–∞—è'}"
            ],
            "analysis_date": datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not db.video_exists(video_id):
            video_data['analyzed_at'] = datetime.now().isoformat()
            db.save_video(video_data)
        
        return analysis_result
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ: {str(e)}")

@analysis_router.post("/bulk")
async def analyze_bulk(video_urls: List[str], background_tasks: BackgroundTasks):
    """–ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ò–∑–≤–ª–µ—á—å video_ids
        video_ids = []
        for url in video_urls:
            video_id = utils.extract_video_id_from_url(url)
            if video_id:
                video_ids.append(video_id)
        
        if not video_ids:
            raise HTTPException(status_code=400, detail="–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö video ID")
        
        # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        task_id = str(uuid.uuid4())
        task_data = {
            "task_id": task_id,
            "task_type": "bulk_analysis",
            "status": "created",
            "progress": 0,
            "total_items": len(video_ids),
            "config": {"video_ids": video_ids}
        }
        
        db.save_task(task_data)
        active_tasks[task_id] = task_data
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(process_bulk_analysis, task_id, video_ids)
        
        return {
            "task_id": task_id,
            "video_count": len(video_ids),
            "status": "started"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

async def process_bulk_analysis(task_id: str, video_ids: List[str]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        active_tasks[task_id]["status"] = "running"
        db.update_task_status(task_id, "running")
        
        for idx, video_id in enumerate(video_ids):
            if task_id in active_tasks and active_tasks[task_id]["status"] == "paused":
                return
            
            try:
                details = youtube_parser.get_video_details([video_id])
                if video_id in details:
                    video_data = details[video_id]
                    video_data['analyzed_at'] = datetime.now().isoformat()
                    video_data['task_id'] = task_id
                    db.save_video(video_data)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                active_tasks[task_id]["progress"] = idx + 1
                db.update_task_progress(task_id, idx + 1, len(video_ids))
                
                await asyncio.sleep(settings.REQUEST_DELAY)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ {video_id}: {e}")
                continue
        
        active_tasks[task_id]["status"] = "completed"
        db.update_task_status(task_id, "completed")
        
    except Exception as e:
        active_tasks[task_id]["status"] = "error"
        db.update_task_status(task_id, "error", str(e))

print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
"""
YouTube Analyzer - Configuration Management
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã
"""
import os
import json
from pathlib import Path
from pydantic_settings import BaseSettings
from pydantic import Field
from typing import Optional

class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # YouTube API
    YOUTUBE_API_KEY: str = Field(default="", env="YOUTUBE_API_KEY")
    
    # Database
    DATABASE_PATH: str = Field(default="youtube_data.db", env="DATABASE_PATH")
    
    # Limits
    MAX_LONG_VIDEOS_CHANNEL: int = Field(default=5, ge=1, le=500)
    MAX_LONG_VIDEOS_SEARCH: int = Field(default=5, ge=1, le=500)
    MAX_SHORTS_CHANNEL: int = Field(default=5, ge=1, le=500)
    MAX_SHORTS_SEARCH: int = Field(default=5, ge=1, le=500)
    
    # Processing
    ORDER_BY: str = Field(default="relevance", pattern=r"^(relevance|date|viewCount|both)$")
    MAX_TRANSCRIPT_LENGTH: int = Field(default=50000, ge=1000, le=100000)
    WHISPER_MODEL: str = Field(default="tiny", pattern=r"^(tiny|base|small|medium|large)$")
    
    # Server
    HOST: str = Field(default="127.0.0.1", env="HOST")
    PORT: int = Field(default=8000, env="PORT")
    DEBUG: bool = Field(default=True, env="DEBUG")
    
    # Paths
    TEMP_DIR: str = Field(default="temp", env="TEMP_DIR")
    EXPORT_DIR: str = Field(default="exports", env="EXPORT_DIR")
    
    # Processing settings
    REQUEST_DELAY: float = Field(default=1.0, description="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É API –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)")
    MAX_CONCURRENT_TASKS: int = Field(default=3, description="–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
    TASK_TIMEOUT: int = Field(default=3600, description="–¢–∞–π–º–∞—É—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    # Cache settings
    ENABLE_CACHE: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    CACHE_TTL: int = Field(default=3600, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = True
        extra = "ignore"  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ .env
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._ensure_directories()
        self._load_from_json()
    
    def _ensure_directories(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        Path(self.TEMP_DIR).mkdir(exist_ok=True)
        Path(self.EXPORT_DIR).mkdir(exist_ok=True)
    
    def _load_from_json(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        config_path = Path("config.json")
        if config_path.exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON
                for key, value in config_data.items():
                    if hasattr(self, key.upper()):
                        setattr(self, key.upper(), value)
                    elif hasattr(self, key):
                        setattr(self, key, value)
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
    
    def save_to_json(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
        config_data = {}
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for field_name, field_info in self.__fields__.items():
            value = getattr(self, field_name)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –≤ snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            json_key = field_name.lower()
            config_data[json_key] = value
        
        # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        if config_data.get('youtube_api_key'):
            config_data['youtube_api_key'] = '***'
        
        try:
            with open("config.json", 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config.json")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def update_from_dict(self, data: dict):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        for key, value in data.items():
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∏–º–µ–Ω–∏
            field_variants = [
                key.upper(),
                key.lower(), 
                key
            ]
            
            for variant in field_variants:
                if hasattr(self, variant):
                    setattr(self, variant, value)
                    break
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.save_to_json()
    
    def get_youtube_settings(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è YouTube API"""
        return {
            "api_key": self.YOUTUBE_API_KEY,
            "max_long_videos_channel": self.MAX_LONG_VIDEOS_CHANNEL,
            "max_long_videos_search": self.MAX_LONG_VIDEOS_SEARCH,
            "max_shorts_channel": self.MAX_SHORTS_CHANNEL,
            "max_shorts_search": self.MAX_SHORTS_SEARCH,
            "order_by": self.ORDER_BY
        }
    
    def get_processing_settings(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return {
            "whisper_model": self.WHISPER_MODEL,
            "max_transcript_length": self.MAX_TRANSCRIPT_LENGTH,
            "request_delay": self.REQUEST_DELAY,
            "max_concurrent_tasks": self.MAX_CONCURRENT_TASKS,
            "task_timeout": self.TASK_TIMEOUT
        }
    
    def get_database_settings(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "database_path": self.DATABASE_PATH,
            "temp_dir": self.TEMP_DIR,
            "export_dir": self.EXPORT_DIR
        }
    
    def validate_youtube_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å YouTube API –∫–ª—é—á–∞"""
        if not self.YOUTUBE_API_KEY or self.YOUTUBE_API_KEY == "YOUR_API_KEY_HERE":
            return False
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (YouTube API –∫–ª—é—á–∏ –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–æ–π 39 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(self.YOUTUBE_API_KEY) < 30:
            return False
            
        return True
    
    def get_safe_dict(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        safe_dict = {}
        
        for field_name in self.__fields__:
            value = getattr(self, field_name)
            
            # –°–∫—Ä—ã—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'api_key' in field_name.lower() or 'password' in field_name.lower():
                safe_dict[field_name.lower()] = '***' if value else ''
            else:
                safe_dict[field_name.lower()] = value
        
        return safe_dict
    
    def dict(self, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ dict –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.model_dump(**kwargs)

# –°–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
def get_settings() -> Settings:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return settings

def update_settings(**kwargs) -> Settings:
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings.update_from_dict(kwargs)
    return settings

def reload_settings() -> Settings:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    global settings
    settings = Settings()
    return settings

def create_example_files():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    # –°–æ–∑–¥–∞—Ç—å .env.example
    env_example = """# YouTube Analyzer - Environment Variables
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

# YouTube API Key (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
YOUTUBE_API_KEY=your_youtube_api_key_here

# Database
DATABASE_PATH=youtube_data.db

# Server settings
HOST=127.0.0.1
PORT=8000
DEBUG=true

# Directories
TEMP_DIR=temp
EXPORT_DIR=exports
"""
    
    with open('.env.example', 'w', encoding='utf-8') as f:
        f.write(env_example)
    
    # –°–æ–∑–¥–∞—Ç—å config.json.example
    config_example = {
        "youtube_api_key": "YOUR_API_KEY_HERE",
        "max_long_videos_channel": 5,
        "max_long_videos_search": 5,
        "max_shorts_channel": 5,
        "max_shorts_search": 5,
        "order_by": "relevance",
        "max_transcript_length": 50000,
        "whisper_model": "tiny",
        "request_delay": 1.0,
        "max_concurrent_tasks": 3,
        "enable_cache": True,
        "cache_ttl": 3600
    }
    
    with open('config.json.example', 'w', encoding='utf-8') as f:
        json.dump(config_example, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    print("   - .env.example")
    print("   - config.json.example")

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ == "__main__":
    print("üîß YouTube Analyzer - Configuration")
    print(f"üìÅ Database: {settings.DATABASE_PATH}")
    print(f"üîë YouTube API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if settings.validate_youtube_api() else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"üè† Host: {settings.HOST}:{settings.PORT}")
    print(f"üîß Debug: {settings.DEBUG}")
    
    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not Path('.env.example').exists():
        create_example_files()

print("‚úÖ Configuration manager –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
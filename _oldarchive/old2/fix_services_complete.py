"""
–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ services.py
"""
import re
import ast

print("üîß –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ services.py...")

# –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
try:
    with open('backend/services.py', 'r', encoding='utf-8') as f:
        content = f.read()
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
    exit(1)

# –°–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
fixes_applied = []

# 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON loads –ø—Ä–æ–±–ª–µ–º—ã
print("\n1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON loads...")
old_pattern = r'''processed_items = set\(json\.loads\(current_task\.get\('items_processed', '\[\]'\)\)\)
        failed_items = set\(json\.loads\(current_task\.get\('items_failed', '\[\]'\)\)\)'''

new_code = '''# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON
        items_processed_data = current_task.get('items_processed', '[]')
        items_failed_data = current_task.get('items_failed', '[]')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        if isinstance(items_processed_data, str):
            try:
                processed_items = set(json.loads(items_processed_data))
            except json.JSONDecodeError:
                processed_items = set()
        elif isinstance(items_processed_data, list):
            processed_items = set(items_processed_data)
        else:
            processed_items = set()
        
        if isinstance(items_failed_data, str):
            try:
                failed_items = set(json.loads(items_failed_data))
            except json.JSONDecodeError:
                failed_items = set()
        elif isinstance(items_failed_data, list):
            failed_items = set(items_failed_data)
        else:
            failed_items = set()'''

if 'processed_items = set(json.loads(' in content:
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫ –∫–æ–¥–∞
    lines = content.split('\n')
    new_lines = []
    i = 0
    while i < len(lines):
        if 'processed_items = set(json.loads(' in lines[i]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
            indent = len(lines[i]) - len(lines[i].lstrip())
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
            i += 1
            if i < len(lines) and 'failed_items = set(json.loads(' in lines[i]:
                i += 1
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
            for new_line in new_code.split('\n'):
                if new_line.strip():
                    new_lines.append(' ' * indent + new_line.strip())
                else:
                    new_lines.append('')
            fixes_applied.append("JSON loads –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        else:
            new_lines.append(lines[i])
            i += 1
    content = '\n'.join(new_lines)

# 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤
print("\n2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤...")
lines = content.split('\n')
fixed_lines = []
indent_stack = [0]
prev_line_empty = False

for i, line in enumerate(lines):
    stripped = line.strip()
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if not stripped:
        fixed_lines.append('')
        prev_line_empty = True
        continue
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—Ç—É–ø
    current_indent = len(line) - len(line.lstrip())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç—Å—Ç—É–ø
    if stripped.startswith(('def ', 'class ', 'if ', 'elif ', 'else:', 'try:', 'except', 'finally:', 'for ', 'while ', 'with ')):
        if stripped.endswith(':'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ —Å—Ç–µ–∫–∞
            if prev_line_empty and len(indent_stack) > 1:
                expected_indent = indent_stack[-2]
            else:
                expected_indent = indent_stack[-1]
            fixed_line = ' ' * expected_indent + stripped
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ —Å—Ç–µ–∫
            if not stripped.startswith(('elif ', 'else:', 'except', 'finally:')):
                indent_stack.append(expected_indent + 4)
        else:
            expected_indent = indent_stack[-1]
            fixed_line = ' ' * expected_indent + stripped
    elif stripped.startswith(('return', 'pass', 'continue', 'break', 'raise')):
        # –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
        expected_indent = indent_stack[-1]
        fixed_line = ' ' * expected_indent + stripped
        # –ü–æ—Å–ª–µ return/pass –º–æ–∂–µ—Ç –±—ã—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–∞
        if len(indent_stack) > 1:
            indent_stack.pop()
    else:
        # –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞
        expected_indent = indent_stack[-1]
        fixed_line = ' ' * expected_indent + stripped
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –æ—Ç—Å—Ç—É–ø
    if current_indent < indent_stack[-1] and len(indent_stack) > 1:
        # –£–¥–∞–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –∏–∑ —Å—Ç–µ–∫–∞
        while len(indent_stack) > 1 and current_indent < indent_stack[-1]:
            indent_stack.pop()
    
    fixed_lines.append(fixed_line)
    prev_line_empty = False
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –µ—Å–ª–∏ –æ–Ω –Ω–µ –∫—Ä–∞—Ç–µ–Ω 4
    if current_indent != expected_indent and current_indent % 4 != 0:
        fixes_applied.append(f"–û—Ç—Å—Ç—É–ø –≤ —Å—Ç—Ä–æ–∫–µ {i+1}")

content = '\n'.join(fixed_lines)

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ try/except –±–ª–æ–∫–æ–≤
print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ try/except –±–ª–æ–∫–æ–≤...")
lines = content.split('\n')
fixed_lines = []
i = 0

while i < len(lines):
    line = lines[i]
    stripped = line.strip()
    
    if stripped == 'try:':
        # –ù–∞—à–ª–∏ try –±–ª–æ–∫
        try_indent = len(line) - len(line.lstrip())
        fixed_lines.append(line)
        i += 1
        
        # –ò—â–µ–º except/finally
        has_except = False
        while i < len(lines):
            current_line = lines[i]
            current_stripped = current_line.strip()
            current_indent = len(current_line) - len(current_line.lstrip())
            
            if current_indent <= try_indent and current_stripped:
                # –í—ã—à–ª–∏ –∏–∑ try –±–ª–æ–∫–∞
                if not has_except and not current_stripped.startswith(('except', 'finally')):
                    # –î–æ–±–∞–≤–ª—è–µ–º except
                    fixed_lines.append(' ' * try_indent + 'except Exception:')
                    fixed_lines.append(' ' * (try_indent + 4) + 'pass')
                    fixes_applied.append(f"–î–æ–±–∞–≤–ª–µ–Ω except –±–ª–æ–∫ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ {i}")
                break
            
            if current_stripped.startswith(('except', 'finally')):
                has_except = True
            
            fixed_lines.append(current_line)
            i += 1
        
        if i >= len(lines) and not has_except:
            # try –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –±–µ–∑ except
            fixed_lines.append(' ' * try_indent + 'except Exception:')
            fixed_lines.append(' ' * (try_indent + 4) + 'pass')
            fixes_applied.append("–î–æ–±–∞–≤–ª–µ–Ω except –±–ª–æ–∫ –≤ –∫–æ–Ω–µ—Ü")
    else:
        fixed_lines.append(line)
        i += 1

content = '\n'.join(fixed_lines)

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å –ø–æ–º–æ—â—å—é ast
print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python...")
try:
    ast.parse(content)
    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
except SyntaxError as e:
    print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {e}")
    print(f"   –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.text}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if "expected an indented block" in str(e):
        lines = content.split('\n')
        if e.lineno and e.lineno <= len(lines):
            # –î–æ–±–∞–≤–ª—è–µ–º pass –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
            problem_line = lines[e.lineno - 1]
            indent = len(problem_line) - len(problem_line.lstrip()) + 4
            lines.insert(e.lineno, ' ' * indent + 'pass')
            content = '\n'.join(lines)
            fixes_applied.append(f"–î–æ–±–∞–≤–ª–µ–Ω pass –≤ —Å—Ç—Ä–æ–∫—É {e.lineno}")

# 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
required_imports = [
    'import json',
    'import asyncio',
    'import uuid',
    'from datetime import datetime, timedelta',
    'from typing import List, Dict, Optional, Any',
    'from fastapi import APIRouter, BackgroundTasks, HTTPException',
]

lines = content.split('\n')
import_section = []
other_lines = []
in_imports = True

for line in lines:
    if in_imports and (line.startswith(('import ', 'from ')) or not line.strip()):
        import_section.append(line)
    else:
        in_imports = False
        other_lines.append(line)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
existing_imports = '\n'.join(import_section)
for imp in required_imports:
    if imp not in existing_imports:
        import_section.insert(0, imp)
        fixes_applied.append(f"–î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç: {imp}")

# –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ
content = '\n'.join(import_section + other_lines)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
try:
    # –î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    with open('backend/services.py', 'r', encoding='utf-8') as f:
        backup_content = f.read()
    
    with open('backend/services_backup.py', 'w', encoding='utf-8') as f:
        f.write(backup_content)
    print("\nüíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: services_backup.py")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('backend/services.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("\n‚úÖ –§–∞–π–ª services.py —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
    if fixes_applied:
        print("\nüìù –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for fix in fixes_applied:
            print(f"   - {fix}")
    
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

print("\nüéØ –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä:")
print("   python backend/main.py")
print("\nüí° –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
print("   python backend/complete_server.py")

input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
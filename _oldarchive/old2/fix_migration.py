"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î
"""
import sqlite3
from pathlib import Path

def fix_database_migration():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π –ë–î"""
    db_path = "youtube_data.db"
    
    if not Path(db_path).exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ tasks
        cursor.execute("PRAGMA table_info(tasks)")
        existing_columns = {col[1] for col in cursor.fetchall()}
        print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ tasks: {existing_columns}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        new_columns = {
            'checkpoint_data': 'TEXT',
            'last_checkpoint_at': 'TEXT',
            'processing_time': 'INTEGER DEFAULT 0',
            'items_processed': 'TEXT',
            'items_failed': 'TEXT',
            'retry_count': 'INTEGER DEFAULT 0',
            'paused_at': 'TEXT',
            'resumed_at': 'TEXT',
            'completed_at': 'TEXT',
            'estimated_completion': 'TEXT',
            'resources_used': 'TEXT'
        }
        
        for column, definition in new_columns.items():
            if column not in existing_columns:
                try:
                    query = f'ALTER TABLE tasks ADD COLUMN {column} {definition}'
                    cursor.execute(query)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {column}")
                except sqlite3.OperationalError as e:
                    print(f"‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ {column} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS transcript_cache (
                video_id TEXT PRIMARY KEY,
                transcript TEXT,
                language TEXT,
                source TEXT,
                confidence_score REAL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                expires_at TEXT
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ transcript_cache –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS trend_analysis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT,
                date TEXT,
                video_count INTEGER,
                avg_views INTEGER,
                avg_engagement REAL,
                top_channels TEXT,
                trending_topics TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ trend_analysis –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS competitor_analysis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                channel_id TEXT,
                competitor_channel_id TEXT,
                comparison_date TEXT,
                metrics_comparison TEXT,
                strengths TEXT,
                weaknesses TEXT,
                opportunities TEXT,
                recommendations TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ competitor_analysis –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")
        
        conn.commit()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î...")
    fix_database_migration()
    print("\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: run.bat")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
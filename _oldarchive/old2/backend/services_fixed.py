"""
YouTube Analyzer - Fixed API Services
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
"""
from fastapi import APIRouter, BackgroundTasks, HTTPException, UploadFile, File
from typing import List, Dict, Optional, Any
import uuid
import asyncio
import json
from datetime import datetime, timedelta
import sys
from pathlib import Path
import re
from collections import Counter
import hashlib

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
project_root = current_dir.parent
sys.path.append(str(project_root))

from models import *
from database import DatabaseManager
from shared.config import settings
from shared.utils import Utils
from shared.youtube_parser import YouTubeParser

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = DatabaseManager()
utils = Utils()
youtube_parser = YouTubeParser(settings.YOUTUBE_API_KEY) if settings.YOUTUBE_API_KEY else None

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
tasks_router = APIRouter()
youtube_router = APIRouter()
analysis_router = APIRouter()
data_router = APIRouter()
config_router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
active_tasks = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
AUTOSAVE_INTERVAL = 10  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 10 –≤–∏–¥–µ–æ
CHECKPOINT_INTERVAL = 300  # –°–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_active_tasks():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    global active_tasks
    try:
        tasks = db.get_all_tasks()
        for task in tasks:
            if task['status'] in ['running', 'paused', 'created']:
                active_tasks[task['task_id']] = task
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                checkpoint = db.get_task_checkpoint(task['task_id'])
                if checkpoint:
                    active_tasks[task['task_id']]['checkpoint'] = checkpoint
                    
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}")

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
load_active_tasks()

# ============ TASKS SERVICE ============

@tasks_router.get("/", response_model=List[Dict])
async def get_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    try:
        tasks = db.get_all_tasks()
        return tasks
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}")

@tasks_router.get("/active")
async def get_active_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø–∞–º—è—Ç–∏"""
    return {
        "count": len(active_tasks),
        "tasks": list(active_tasks.values())
    }

@tasks_router.post("/", response_model=TaskCreateResponse)
async def create_task(task: TaskCreate, background_tasks: BackgroundTasks):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not task.keywords and not task.channels:
            raise HTTPException(status_code=400, detail="–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª—ã")
        
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_id = str(uuid.uuid4())
        total_items = len(task.keywords) + len(task.channels)
        
        task_data = {
            "task_id": task_id,
            "status": "created",
            "progress": 0,
            "total_items": total_items,
            "created_at": datetime.now().isoformat(),
            "config": task.dict(),
            "items_processed": [],
            "items_failed": []
        }
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        db.save_task(task_data)
        active_tasks[task_id] = task_data
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(process_task_simple, task_id, task)
        
        return TaskCreateResponse(
            task_id=task_id,
            status=TaskStatus.CREATED,
            message="–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")

@tasks_router.get("/{task_id}")
async def get_task(task_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        task = db.get_task(task_id)
        if not task:
            raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return task
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")

@tasks_router.post("/{task_id}/pause")
async def pause_task(task_id: str):
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–∞—É–∑—É"""
    try:
        if task_id in active_tasks:
            active_tasks[task_id]["status"] = "paused"
            db.update_task_status(task_id, "paused")
            return {"message": "–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É", "status": "paused"}
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –ë–î
        task = db.get_task(task_id)
        if task and task['status'] == 'running':
            db.update_task_status(task_id, "paused")
            return {"message": "–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É", "status": "paused"}
            
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –∑–∞–¥–∞—á–∏: {str(e)}")

@tasks_router.post("/{task_id}/resume")
async def resume_task(task_id: str, background_tasks: BackgroundTasks):
    """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        task = db.get_task(task_id)
        if not task:
            raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if task['status'] == 'paused':
            db.update_task_status(task_id, "running")
            active_tasks[task_id] = task
            active_tasks[task_id]["status"] = "running"
            
            # –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
            task_config = json.loads(task['config']) if isinstance(task['config'], str) else task['config']
            task_obj = TaskCreate(**task_config)
            background_tasks.add_task(process_task_simple, task_id, task_obj, resume=True)
            
            return {"message": "–ó–∞–¥–∞—á–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞", "status": "running"}
        else:
            raise HTTPException(status_code=400, detail=f"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {task['status']}")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")

async def process_task_simple(task_id: str, task: TaskCreate, resume: bool = False):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏"""
    try:
        print(f"üîÑ {'–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º' if resume else '–ù–∞—á–∏–Ω–∞–µ–º'} –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ {task_id}")
        
        if not resume:
            active_tasks[task_id]["status"] = "running"
            db.update_task_status(task_id, "running")
        
        total = len(task.keywords) + len(task.channels)
        progress = 0
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for keyword in task.keywords:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã
            if task_id in active_tasks and active_tasks[task_id]["status"] == "paused":
                print(f"‚è∏Ô∏è  –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞ –ø–∞—É–∑–µ")
                return
                
            print(f"üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {keyword}")
            
            try:
                # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await asyncio.sleep(1)
                progress += 1
                
                # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                if task_id in active_tasks:
                    active_tasks[task_id]["progress"] = progress
                    db.update_task_progress(task_id, progress, total)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ {keyword}: {e}")
                continue
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        for channel_url in task.channels:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã
            if task_id in active_tasks and active_tasks[task_id]["status"] == "paused":
                print(f"‚è∏Ô∏è  –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞ –ø–∞—É–∑–µ")
                return
                
            print(f"üì∫ –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_url}")
            
            try:
                # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await asyncio.sleep(1)
                progress += 1
                
                # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                if task_id in active_tasks:
                    active_tasks[task_id]["progress"] = progress
                    db.update_task_progress(task_id, progress, total)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_url}: {e}")
                continue
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if task_id in active_tasks:
            active_tasks[task_id]["status"] = "completed"
        db.update_task_status(task_id, "completed")
        
        # –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if task_id in active_tasks:
            del active_tasks[task_id]
            
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}: {e}")
        if task_id in active_tasks:
            active_tasks[task_id]["status"] = "error"
        db.update_task_status(task_id, "error", str(e))

# ============ YOUTUBE SERVICE ============

@youtube_router.get("/search")
async def search_videos(query: str, max_results: int = 10, order: str = "relevance"):
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        videos = youtube_parser.search_videos(query, max_results, order)
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        video_ids = [v['video_id'] for v in videos]
        details = youtube_parser.get_video_details(video_ids)
        
        # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        for video in videos:
            if video['video_id'] in details:
                video.update(details[video['video_id']])
        
        return {
            "videos": videos, 
            "count": len(videos),
            "query": query,
            "order": order
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

@youtube_router.get("/channel/{channel_id}")
async def get_channel_info(channel_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        channel_info = youtube_parser.get_channel_info(channel_id)
        if not channel_info:
            raise HTTPException(status_code=404, detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return channel_info
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")

@youtube_router.get("/channel/{channel_id}/videos")
async def get_channel_videos(channel_id: str, max_results: int = 20):
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        videos = youtube_parser.get_channel_videos(channel_id, max_results)
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        video_ids = [v['video_id'] for v in videos]
        details = youtube_parser.get_video_details(video_ids)
        
        # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        for video in videos:
            if video['video_id'] in details:
                video.update(details[video['video_id']])
        
        return {
            "channel_id": channel_id,
            "videos": videos,
            "count": len(videos)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞: {str(e)}")

# ============ DATA SERVICE ============

@data_router.get("/videos")
async def get_videos(
    limit: int = 100, 
    offset: int = 0,
    is_short: Optional[bool] = None,
    channel_id: Optional[str] = None,
    min_views: Optional[int] = None,
    min_engagement: Optional[float] = None
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    try:
        filters = {}
        if is_short is not None:
            filters['is_short'] = is_short
        if channel_id:
            filters['channel_id'] = channel_id
        if min_views:
            filters['min_views'] = min_views
        if min_engagement:
            filters['min_engagement'] = min_engagement
        
        videos = db.get_videos(limit, offset, filters)
        return videos
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

@data_router.get("/videos/{video_id}")
async def get_video_details(video_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
    try:
        video = db.get_video_by_id(video_id)
        if not video:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return video
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

@data_router.get("/channels")
async def get_channels():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        channels = db.get_channels()
        return channels
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")

@data_router.get("/channels/{channel_id}")
async def get_channel_details(channel_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        channel = db.get_channel_stats(channel_id)
        if not channel:
            raise HTTPException(status_code=404, detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return channel
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")

@data_router.get("/stats")
async def get_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        stats = db.get_statistics()
        stats['active_tasks'] = len(active_tasks)
        
        # –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –∫—ç—à
        db.clean_expired_cache()
        
        return stats
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@data_router.get("/export")
async def export_to_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    try:
        filename = db.export_to_excel()
        file_path = Path(filename)
        
        return {
            "filename": file_path.name,
            "status": "exported",
            "path": str(file_path),
            "size": file_path.stat().st_size if file_path.exists() else 0
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

@data_router.get("/export/download/{filename}")
async def download_export(filename: str):
    """–°–∫–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    from fastapi.responses import FileResponse
    
    file_path = Path(settings.EXPORT_DIR) / filename
    if file_path.exists() and file_path.suffix == '.xlsx':
        return FileResponse(
            path=str(file_path),
            filename=filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

@data_router.delete("/clear")
async def clear_database():
    """–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active_tasks.clear()
        
        # –û—á–∏—Å—Ç–∏—Ç—å –ë–î
        db.clear_database()
        
        return {"message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞", "status": "success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {str(e)}")

@data_router.post("/backup")
async def backup_database():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        backup_path = db.backup_database()
        return {
            "message": "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞",
            "path": backup_path,
            "status": "success"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")

# ============ CONFIG SERVICE ============

@config_router.get("/")
async def get_config():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        config = settings.get_safe_dict()
        config['has_youtube_api'] = bool(settings.YOUTUBE_API_KEY)
        config['whisper_models'] = ['tiny', 'base', 'small', 'medium', 'large']
        return config
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

@config_router.post("/")
async def update_config(config_data: dict):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings.update_from_dict(config_data)
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å YouTube parser –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è API –∫–ª—é—á
        global youtube_parser
        if 'youtube_api_key' in config_data and config_data['youtube_api_key']:
            if config_data['youtube_api_key'] != '***':  # –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ—Å–ª–∏ —Å–∫—Ä—ã—Ç–æ
                settings.YOUTUBE_API_KEY = config_data['youtube_api_key']
                youtube_parser = YouTubeParser(config_data['youtube_api_key'])
        
        return {
            "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            "status": "success",
            "config": settings.get_safe_dict()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

@config_router.post("/validate-api-key")
async def validate_api_key(api_key: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å YouTube API –∫–ª—é—á"""
    try:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –∏ —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_parser = YouTubeParser(api_key)
        test_videos = test_parser.search_videos("test", 1)
        
        return {
            "valid": True,
            "message": "API –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π"
        }
    except Exception as e:
        return {
            "valid": False,
            "message": f"–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞: {str(e)}"
        }

# ============ ANALYSIS SERVICE ============

@analysis_router.post("/video/{video_id}")
async def analyze_video(video_id: str):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    try:
        if not youtube_parser:
            raise HTTPException(status_code=400, detail="YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        details = youtube_parser.get_video_details([video_id])
        if video_id not in details:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        video_data = details[video_id]
        
        # –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑
        analysis_result = {
            "video_id": video_id,
            "engagement_metrics": {
                "views": video_data.get('views', 0),
                "likes": video_data.get('likes', 0),
                "comments": video_data.get('comments', 0),
                "engagement_rate": utils.calculate_engagement_rate(
                    video_data.get('views', 0),
                    video_data.get('likes', 0),
                    video_data.get('comments', 0)
                )
            },
            "content_analysis": {
                "duration": video_data.get('duration'),
                "is_short": video_data.get('is_short', False),
                "has_cc": video_data.get('has_cc', False),
                "tags_count": len(video_data.get('tags', [])),
                "video_quality": video_data.get('video_quality', 'sd')
            },
            "recommendations": [
                "–î–æ–±–∞–≤—å—Ç–µ —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ö–≤–∞—Ç–∞",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è SEO",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤"
            ],
            "analysis_date": datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not db.video_exists(video_id):
            video_data['analyzed_at'] = datetime.now().isoformat()
            db.save_video(video_data)
        
        return analysis_result
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ: {str(e)}")

# ============ STARTUP/SHUTDOWN ============

async def startup_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ YouTube Analyzer Services...")
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î
    try:
        db.migrate_database()
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫—ç—à–∞
    try:
        db.clean_expired_cache()
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    load_active_tasks()
    
    print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")

async def shutdown_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ YouTube Analyzer Services...")
    
    # –°–æ–∑–¥–∞—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    for task_id, task in active_tasks.items():
        if task['status'] == 'running':
            db.update_task_status(task_id, 'paused')
    
    print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

print("‚úÖ Fixed Services –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
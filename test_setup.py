"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""
import sys
import os
import asyncio
from colorama import init, Fore, Style

init(autoreset=True)

def print_header(text):
    print(f"\n{Fore.CYAN}{'='*60}")
    print(f"{Fore.CYAN}{text:^60}")
    print(f"{Fore.CYAN}{'='*60}{Style.RESET_ALL}")

def print_success(text):
    print(f"{Fore.GREEN}‚úÖ {text}{Style.RESET_ALL}")

def print_error(text):
    print(f"{Fore.RED}‚ùå {text}{Style.RESET_ALL}")

def print_warning(text):
    print(f"{Fore.YELLOW}‚ö†Ô∏è  {text}{Style.RESET_ALL}")

def print_info(text):
    print(f"{Fore.BLUE}‚ÑπÔ∏è  {text}{Style.RESET_ALL}")

# –¢–µ—Å—Ç 1: Python –≤–µ—Ä—Å–∏—è
def test_python():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python")
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print_success(f"Python {version.major}.{version.minor}.{version.micro}")
        return True
    else:
        print_error(f"Python {version.major}.{version.minor} - —Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+")
        return False

# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
def test_imports():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫")
    
    required_imports = [
        ("fastapi", "FastAPI"),
        ("uvicorn", "Uvicorn"),
        ("sqlalchemy", "SQLAlchemy"),
        ("aiosqlite", "Aiosqlite"),
        ("googleapiclient", "Google API Client"),
        ("celery", "Celery"),
        ("redis", "Redis-py"),
        ("websockets", "WebSockets"),
        ("pandas", "Pandas"),
        ("nltk", "NLTK"),
        ("dotenv", "Python-dotenv"),
        ("eventlet", "Eventlet (–¥–ª—è Windows)")
    ]
    
    all_ok = True
    for module, name in required_imports:
        try:
            __import__(module)
            print_success(f"{name}")
        except ImportError as e:
            print_error(f"{name} - {e}")
            all_ok = False
    
    return all_ok

# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
async def test_redis():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    try:
        import redis.asyncio as redis
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        r = redis.Redis(host='localhost', port=6379, decode_responses=True)
        
        # –¢–µ—Å—Ç ping
        pong = await r.ping()
        if pong:
            print_success("Redis –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
        await r.set('test_key', 'test_value')
        value = await r.get('test_key')
        if value == 'test_value':
            print_success("Redis –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –û—á–∏—Å—Ç–∫–∞
        await r.delete('test_key')
        
        await r.close()
        return True
        
    except Exception as e:
        print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
        print_info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: docker-compose up -d")
        return False

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery
def test_celery():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ Celery –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    try:
        from celery import Celery
        app = Celery('test')
        app.conf.update(
            broker_url='redis://localhost:6379/0',
            result_backend='redis://localhost:6379/0'
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä—É
        try:
            conn = app.connection()
            conn.ensure_connection(max_retries=1)
            print_success("Celery –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")
            return True
        except Exception as e:
            print_error(f"Celery –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Celery: {e}")
        return False

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
def test_project_files():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
    
    required_files = [
        "main.py",
        "models.py",
        "database.py",
        "api.py",
        "websocket.py",
        "youtube_api.py",
        "analyzer.py",
        "tasks.py",
        "index.html",
        "app.js",
        "styles.css",
        ".env",
        "docker-compose.yml"
    ]
    
    all_ok = True
    for file in required_files:
        if os.path.exists(file):
            print_success(f"{file}")
        else:
            print_error(f"{file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_ok = False
    
    return all_ok

# –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
def test_env():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env)")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        required_vars = [
            "YOUTUBE_API_KEY",
            "DATABASE_PATH",
            "HOST",
            "PORT"
        ]
        
        all_ok = True
        for var in required_vars:
            value = os.getenv(var)
            if value:
                if var == "YOUTUBE_API_KEY":
                    print_success(f"{var} = ***{value[-4:]}")
                else:
                    print_success(f"{var} = {value}")
            else:
                print_error(f"{var} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                all_ok = False
        
        return all_ok
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
        return False

# –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def test_database():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        from database import init_db, get_session
        from models import Video
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_db()
        print_success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        async with get_session() as session:
            from sqlalchemy import select
            stmt = select(Video).limit(1)
            result = await session.execute(stmt)
            video = result.scalar_one_or_none()
            
            if video is None:
                print_info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            else:
                print_success(f"–í –±–∞–∑–µ –µ—Å—Ç—å –≤–∏–¥–µ–æ: {video.title[:50]}...")
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        return False

# –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ YouTube API
def test_youtube_api():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ YouTube API")
    
    try:
        api_key = os.getenv("YOUTUBE_API_KEY")
        if not api_key:
            print_error("YOUTUBE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
            return False
        
        from googleapiclient.discovery import build
        youtube = build("youtube", "v3", developerKey=api_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        request = youtube.search().list(
            part="snippet",
            q="test",
            maxResults=1
        )
        response = request.execute()
        
        if 'items' in response:
            print_success("YouTube API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print_warning("YouTube API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ YouTube API: {e}")
        print_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
        return False

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print(f"{Fore.MAGENTA}")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë         YouTube Analyzer - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã           ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"{Style.RESET_ALL}")
    
    results = []
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    results.append(("Python", test_python()))
    results.append(("–ò–º–ø–æ—Ä—Ç—ã", test_imports()))
    results.append(("–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞", test_project_files()))
    results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_env()))
    results.append(("YouTube API", test_youtube_api()))
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    results.append(("Redis", await test_redis()))
    results.append(("Celery", test_celery()))
    results.append(("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", await test_database()))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        if result:
            print(f"{Fore.GREEN}‚úÖ {name:<20} OK{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}‚ùå {name:<20} FAILED{Style.RESET_ALL}")
    
    print(f"\n{Fore.CYAN}–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ{Style.RESET_ALL}")
    
    if passed == total:
        print(f"\n{Fore.GREEN}üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!{Style.RESET_ALL}")
        print(f"{Fore.GREEN}–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: python main.py{Style.RESET_ALL}")
    else:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞{Style.RESET_ALL}")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ colorama –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    try:
        import colorama
    except ImportError:
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞...")
        os.system("pip install colorama")
        import colorama
    
    asyncio.run(main())
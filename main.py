#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
YouTube Competitor Analysis Tool
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –∏ –∫–∞–Ω–∞–ª–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ YouTube
"""

import argparse
import os
import sys
import logging
from pathlib import Path
from typing import List, Optional
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from src.analyzer import YouTubeAnalyzer
from src.utils import setup_logging, load_config, validate_environment
from config import Config

def parse_arguments() -> argparse.Namespace:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="YouTube Competitor Analysis Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s --offer "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã Python"
  %(prog)s --offer "–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" --max-videos 100
  %(prog)s --keywords "python –æ–±—É—á–µ–Ω–∏–µ,–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å" --max-channels 15
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument(
        '--offer', 
        type=str, 
        required=True,
        help='–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞/–ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'
    )
    
    parser.add_argument(
        '--keywords',
        type=str,
        help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'
    )
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    parser.add_argument(
        '--max-videos',
        type=int,
        default=50,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)'
    )
    
    parser.add_argument(
        '--max-channels',
        type=int,
        default=20,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    parser.add_argument(
        '--no-transcripts',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –º–µ–Ω–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ)'
    )
    
    parser.add_argument(
        '--channels-only',
        action='store_true',
        help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã, –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ'
    )
    
    parser.add_argument(
        '--parallel',
        type=int,
        default=4,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)'
    )
    
    # –í—ã–≤–æ–¥ –∏ –æ—Ç—á–µ—Ç—ã
    parser.add_argument(
        '--output-dir',
        type=str,
        default='reports',
        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: reports)'
    )
    
    parser.add_argument(
        '--format',
        choices=['excel', 'json', 'both'],
        default='excel',
        help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: excel)'
    )
    
    # –û—Ç–ª–∞–¥–∫–∞
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )
    
    return parser.parse_args()

def generate_keywords_from_offer(offer: str, additional_keywords: List[str] = None) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—Ñ—Ñ–µ—Ä–∞"""
    
    # –ë–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ—Ñ—Ñ–µ—Ä–∞
    offer_words = [word.lower().strip() for word in offer.split() if len(word) > 3]
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è YouTube –ø–æ–∏—Å–∫–∞
    modifiers = [
        '–∫–∞–∫', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–ª—É—á—à–∏–π', '—Ç–æ–ø', '–æ–±–∑–æ—Ä', '–≥–∞–π–¥', '—É—Ä–æ–∫',
        '–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö', '—Å –Ω—É–ª—è', '–ø–æ—à–∞–≥–æ–≤–æ'
    ]
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    keywords = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords.extend(offer_words[:3])  # –ë–µ—Ä–µ–º 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª–æ–≤–∞
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    for base_word in offer_words[:2]:  # –ë–µ—Ä–µ–º 2 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª–æ–≤–∞
        for modifier in modifiers[:5]:  # –ë–µ—Ä–µ–º 5 –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
            keywords.append(f"{modifier} {base_word}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if additional_keywords:
        keywords.extend(additional_keywords)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    trending_combinations = [
        f"{offer_words[0]} 2025" if offer_words else "2025",
        f"–ª—É—á—à–∏–µ {offer_words[0]}" if offer_words else "–ª—É—á—à–∏–µ",
        f"—Ç–æ–ø {offer_words[0]}" if offer_words else "—Ç–æ–ø"
    ]
    keywords.extend(trending_combinations)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    unique_keywords = list(dict.fromkeys(keywords))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    
    return unique_keywords[:15]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 15 –∫–ª—é—á–µ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏

def display_analysis_plan(args: argparse.Namespace, keywords: List[str]) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n" + "="*60)
    print("–ü–õ–ê–ù –ê–ù–ê–õ–ò–ó–ê YOUTUBE –ö–û–ù–ö–£–†–ï–ù–¢–û–í")
    print("="*60)
    
    print(f"\nüéØ –û–§–§–ï–†: {args.offer}")
    print(f"üìä –ú–ê–°–®–¢–ê–ë –ê–ù–ê–õ–ò–ó–ê:")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≤–∏–¥–µ–æ: {args.max_videos}")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤: {args.max_channels}")
    print(f"   ‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {args.parallel}")
    
    print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ó–ê–ü–†–û–°–´ ({len(keywords)}):")
    for i, keyword in enumerate(keywords, 1):
        print(f"   {i:2d}. {keyword}")
    
    print(f"\n‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò:")
    print(f"   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {'–ù–µ—Ç' if args.no_transcripts else '–î–∞'}")
    print(f"   ‚Ä¢ –¢–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã: {'–î–∞' if args.channels_only else '–ù–µ—Ç'}")
    print(f"   ‚Ä¢ –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–æ–≤: {args.format}")
    print(f"   ‚Ä¢ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {args.output_dir}")
    
    print(f"\nüìã –≠–¢–ê–ü–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    steps = [
        "1. –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º",
        "2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ" + ("" if not args.no_transcripts else " (–±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤)"),
        "3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
        "4. –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
        "5. –ö–æ–Ω—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑ –∏ NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ " + args.format.upper()
    ]
    
    if args.channels_only:
        steps = [s for s in steps if "–≤–∏–¥–µ–æ" not in s.lower() or "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" in s]
    
    for step in steps:
        print(f"   {step}")
    
    print("\n" + "="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé¨ YouTube Competitor Analysis Tool")
    print("üìä –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∏ –∫–∞–Ω–∞–ª–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.DEBUG if args.verbose else logging.INFO
    setup_logging(level=log_level)
    logger = logging.getLogger(__name__)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
        validate_environment()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
        if not Path.cwd().name == "youtube-analyzer" and not str(Path.cwd()) == r"C:\youtube-analyzer":
            logger.warning(f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {Path.cwd()}")
            logger.warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ C:\\youtube-analyzer")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        from src.utils import initialize_project_structure
        initialize_project_structure()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        additional_keywords = []
        if args.keywords:
            additional_keywords = [kw.strip() for kw in args.keywords.split(',')]
        
        keywords = generate_keywords_from_offer(args.offer, additional_keywords)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
        display_analysis_plan(args, keywords)
        
        if args.dry_run:
            print("\nüîç –†–µ–∂–∏–º dry-run: –ø–ª–∞–Ω –ø–æ–∫–∞–∑–∞–Ω, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        if not args.verbose:  # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response = input("\n‚ñ∂Ô∏è  –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑? [y/N]: ").strip().lower()
            if response not in ['y', 'yes', '–¥–∞', '–¥']:
                print("‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω")
                return
        
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
        start_time = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = YouTubeAnalyzer(
            max_workers=args.parallel,
            extract_transcripts=not args.no_transcripts,
            output_dir=args.output_dir
        )
        
        # === –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ ===
        print("\nüìπ –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º...")
        video_urls = analyzer.search_videos_by_keywords(
            keywords=keywords,
            max_results=args.max_videos
        )
        
        if not video_urls:
            logger.error("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(video_urls)} –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # === –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã) ===
        videos_data = []
        if not args.channels_only:
            print(f"\nüîç –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ (0/{len(video_urls)})...")
            videos_data = analyzer.analyze_videos_batch(video_urls)
            print(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(videos_data)} –≤–∏–¥–µ–æ")
        
        # === –≠–¢–ê–ü 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ ===
        print(f"\nüì∫ –≠—Ç–∞–ø 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        if args.channels_only:
            # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º channel_id –∏–∑ URL
            channel_ids = analyzer.extract_channel_ids_from_urls(video_urls)
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
            channel_ids = list(set([v.channel_id for v in videos_data if v.channel_id]))
        
        channel_ids = channel_ids[:args.max_channels]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(channel_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
        # === –≠–¢–ê–ü 4: –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ ===
        print(f"\nüè¢ –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ (0/{len(channel_ids)})...")
        channels_data = analyzer.analyze_channels_batch(channel_ids)
        print(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(channels_data)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # === –≠–¢–ê–ü 5: –ö–æ–Ω—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑ ===
        print(f"\nüß† –≠—Ç–∞–ø 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑...")
        if videos_data:
            analyzer.enhance_video_analysis(videos_data)
        analyzer.enhance_channel_analysis(channels_data)
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # === –≠–¢–ê–ü 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ ===
        print(f"\nüìä –≠—Ç–∞–ø 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        
        report_files = []
        if args.format in ['excel', 'both']:
            excel_files = analyzer.create_excel_reports(videos_data, channels_data)
            report_files.extend(excel_files)
        
        if args.format in ['json', 'both']:
            json_files = analyzer.create_json_reports(videos_data, channels_data)
            report_files.extend(json_files)
        
        # === –ó–ê–í–ï–†–®–ï–ù–ò–ï ===
        end_time = datetime.now()
        duration = end_time - start_time
        
        print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(videos_data)}")
        print(f"   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(channels_data)}")
        print(f"   ‚Ä¢ –û—Ç—á–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(report_files)}")
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        for file_path in report_files:
            print(f"   ‚Ä¢ {file_path}")
        
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if len(videos_data) > 0:
            avg_views = sum(v.views for v in videos_data) / len(videos_data)
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –Ω–∏—à–µ: {avg_views:,.0f}")
        
        if len(channels_data) > 0:
            active_channels = [c for c in channels_data if c.videos_last_3_months > 0]
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞ 3 –º–µ—Å): {len(active_channels)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        print(f"\nüîç –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã:")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–ø-–≤–∏–¥–µ–æ –≤ –æ—Ç—á–µ—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤")
        print(f"   ‚Ä¢ –ò–∑—É—á–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤")
        print(f"   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–µ: logs/youtube_analysis.log")
        sys.exit(1)

if __name__ == "__main__":
    main()
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –≤ services.py
"""
import re

print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –≤ services.py...")

try:
    with open('backend/services.py', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ 412
    print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(lines)}")
    
    if len(lines) > 410:
        print("\n–°—Ç—Ä–æ–∫–∏ 410-414:")
        for i in range(max(0, 410), min(len(lines), 415)):
            print(f"{i+1}: {repr(lines[i])}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    fixed_lines = []
    prev_indent = 0
    in_function = False
    
    for i, line in enumerate(lines):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if line.strip() == '':
            fixed_lines.append(line)
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—Ç—É–ø
        stripped = line.lstrip()
        current_indent = len(line) - len(stripped)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤
        if current_indent % 4 != 0:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 4
            new_indent = round(current_indent / 4) * 4
            fixed_line = ' ' * new_indent + stripped
            fixed_lines.append(fixed_line)
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø –≤ —Å—Ç—Ä–æ–∫–µ {i+1}: {current_indent} -> {new_indent}")
        else:
            fixed_lines.append(line)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('backend/services.py', 'w', encoding='utf-8') as f:
        f.writelines(fixed_lines)
    
    print("‚úÖ –û—Ç—Å—Ç—É–ø—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π working_server_mini.py
print("\nüí° –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä...")

minimal_server = '''"""
YouTube Analyzer - Minimal Working Server
"""
from fastapi import FastAPI
from fastapi.responses import FileResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from pathlib import Path

# –ü—É—Ç–∏
current_dir = Path(__file__).parent
project_root = current_dir.parent
frontend_path = project_root / "frontend"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="YouTube Analyzer - Minimal")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
async def root():
    index_path = frontend_path / "index.html"
    if index_path.exists():
        return FileResponse(str(index_path))
    return HTMLResponse("<h1>index.html not found</h1>")

# JavaScript
@app.get("/app.js")
async def get_app_js():
    js_path = frontend_path / "app.js"
    if js_path.exists():
        return FileResponse(str(js_path), media_type="application/javascript")
    return JSONResponse({"error": "app.js not found"}, status_code=404)

# CSS
@app.get("/style.css")
async def get_style_css():
    css_path = frontend_path / "style.css"
    if css_path.exists():
        return FileResponse(str(css_path), media_type="text/css")
    return JSONResponse({"error": "style.css not found"}, status_code=404)

# –í—Å–µ HTML —Ñ–∞–π–ª—ã
@app.get("/{filename}.html")
async def get_html_file(filename: str):
    file_path = frontend_path / f"{filename}.html"
    if file_path.exists():
        return FileResponse(str(file_path))
    return HTMLResponse(f"<h1>{filename}.html not found</h1>", status_code=404)

# API –∑–∞–≥–ª—É—à–∫–∏
@app.get("/health")
async def health():
    return {"status": "ok"}

@app.get("/api")
async def api_info():
    return {"name": "YouTube Analyzer", "version": "minimal"}

@app.get("/api/tasks")
async def get_tasks():
    return []

@app.get("/api/config") 
async def get_config():
    return {"youtube_api_key": "", "max_long_videos_channel": 5}

@app.get("/api/data/videos")
async def get_videos():
    return []

@app.get("/api/data/stats")
async def get_stats():
    return {"total_videos": 0, "total_channels": 0}

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/", StaticFiles(directory=str(frontend_path)), name="static")

if __name__ == "__main__":
    print("YouTube Analyzer - Minimal Server")
    print(f"Frontend: {frontend_path}")
    print("URL: http://localhost:8000")
    uvicorn.run(app, host="127.0.0.1", port=8000)
'''

try:
    with open('backend/working_server_mini.py', 'w', encoding='utf-8') as f:
        f.write(minimal_server)
    print("‚úÖ –°–æ–∑–¥–∞–Ω backend/working_server_mini.py")
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: {e}")

print("\nüéØ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
print("   python backend/working_server_mini.py")

input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")